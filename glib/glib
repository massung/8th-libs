\ -*- 8th -*-

needs rec
needs sdl/sdl

ns: glib

\ subsystems
needs glib/events
needs glib/input

\ main words to override
defer: load
defer: step
defer: draw

\ internal state
private
var window
var renderer
var should-quit

: create-window \ m --
    >r

    \ window title
    r@ "title" m:_@ "GLIB Window" ?:

    \ x,y coordinates and size
    r@ "x" m:_@ sdl:SDL_WINDOWPOS_UNDEFINED ?:
    r@ "y" m:_@ sdl:SDL_WINDOWPOS_UNDEFINED ?:
    r@ "w" m:_@ 640 ?:
    r@ "h" m:_@ 480 ?:

    \ flags
    r> "flags" m:_@ sdl:SDL_WINDOW_SHOWN ?:

    \ attempt to create the window, die on failure
    sdl:SDL_CreateWindow "Failed to create SDL window!" thrownull
    window ! ;

: create-renderer \ --
    window @ -1 sdl:SDL_RENDERER_ACCELERATED

    \ attempt to create the renderer, die on failure
    sdl:SDL_CreateRenderer "Failed to create SDL renderer!" thrownull
    renderer ! ;

: process-events \ --
    repeat
        glib:poll-event null;

        \ switch based on the event type
        glib:event-type
            [ ( dup sdl:SDL_KEYDOWN n:= ) , ( drop glib:on-keydown )
            , ( dup sdl:SDL_KEYUP n:= ) , ( drop glib:on-keyup )
            , ( 2drop )
            ] when
    again ;

: run-loop \ --
    #p:should-quit @ if;
    #p:process-events

    \ clear the backbuffer
    #p:renderer @ sdl:SDL_RenderClear drop

    \ step + render
    glib:step
    glib:draw

    \ swap and show backbuffer
    #p:renderer @ sdl:SDL_RenderPresent

    \ loop
    run-loop ;

public

-- w: glib:glib-init
-- s: --
-- d: Initializes SDL library and auto shutdown. Asserts on failure.

: glib-init \ --
    sdl:SDL_INIT_EVERYTHING sdl:SDL_Init 0 = assert ' sdl:SDL_Quit onexit ;

-- w: glib:run
-- s: --
-- d: Run the main game loop.

: run \ m --
    #p:create-window
    #p:create-renderer

    \ load assets and main game loop
    load #p:run-loop

    \ cleanup
    #p:renderer @ sdl:SDL_DestroyRenderer
    #p:window @ sdl:SDL_DestroyWindow
    ;

: quit \ --
    true #p:should-quit ! ;
