\ -*- 8th -*-

needs ext/core
needs ext/rec

with: sdl
ns: glib

\ global window and renderer
var window
var renderer

\ subsystems
needs glib/action
needs glib/events
needs glib/image
needs glib/mouse
needs glib/sprite

\ run loop callbacks
defer: step
defer: draw

\ window options
rec: window-opts
    field: title
    field: x
    field: y
    field: width
    field: height
    field: flags
rec;

-- w: glib:create-window
-- s: m -- ptr
-- d: Create the main window using a map of options.

: create-window \ window-opts -- ptr
    >r

    \ window title
    r@ window-opts:_title "GLIB Window" ?:

    \ x,y coordinates and size
    r@ window-opts:_x SDL_WINDOWPOS_UNDEFINED ?:
    r@ window-opts:_y SDL_WINDOWPOS_UNDEFINED ?:
    r@ window-opts:_width 640 ?:
    r@ window-opts:_height 480 ?:

    \ window flags
    r> window-opts:_flags SDL_WINDOW_SHOWN ?:

    \ attempt to create the window, die on failure
    SDL_CreateWindow "Failed to create SDL window!" thrownull ;

-- w: glib:create-renderer
-- s: ptr -- ptr
-- d: Create the renderer for the main window.

: create-renderer \ -- ptr
    window @ -1 SDL_RENDERER_ACCELERATED

    \ attempt to create the renderer, die on failure
    SDL_CreateRenderer "Failed to create SDL renderer!" thrownull ;

-- w: glib:init
-- s: window-opts --
-- d: Initializes SDL library and auto shutdown. Asserts on failure. Creates
-- d: a window and renderer using the provided map of options. Valid map
-- d: options are:
-- d:
-- d:   title (string) - window title
-- d:   x (int)        - left position of window
-- d:   y (int)        - top position of window
-- d:   width (int)    - width of window in pixels
-- d:   height (int)   - height of window in pixels
-- d:   flags (int)    - SDL_WINDOW_* flags

: init \ window-opts --
    init-all

    \ create the main window and renderer
    create-window window !
    create-renderer renderer ! ;

-- w: glib:process-events
-- s: --
-- d: Loop until the event queue has been completely processed.

: process-events \ --
    repeat
        poll-event null;

        \ switch based on the event type
        [ ( dup SDL_QUIT n:= ) , ( bye )
        , ( dup SDL_KEYDOWN n:= ) , ( drop on-keydown )
        , ( dup SDL_KEYUP n:= ) , ( drop on-keyup )
        , ( dup SDL_MOUSEMOTION n:= ) , ( drop on-mousemove )
        , ( dup SDL_MOUSEBUTTONDOWN n:= ) , ( drop on-mousedown )
        , ( dup SDL_MOUSEBUTTONUP n:= ) , ( drop on-mouseup )
        , ( 2drop )
        ] when
    again ;

-- w: glib:clear
-- s: --
-- d: Clear the renderer.

: clear \ --
    renderer @ SDL_RenderClear drop ;

-- w: glib:present
-- s: --
-- d: Swap the backbuffer.

: present \ --
    renderer @ SDL_RenderPresent ;

-- w: glib:run-loop
-- s: --
-- d: Run the main game loop until glib:quit is called.

: run-loop \ --
    repeat
        process-events
        clear
        step
        draw
        present
    again ;

-- w: glib:quit
-- s: --
-- d: Posts a quit event that will be processed next frame.

: quit \ --
    SDL_QUIT 0 SDL_CommonEvent:new SDL_CommonEvent:pack

    \ post the event, ignore the return value
    SDL_PushEvent drop ;

;with
