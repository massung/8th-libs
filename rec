\ -*- 8th -*-

ns: rec

(* Simple record structures for 8th using maps, but with helper definitions
 * for getters, setters, and boa constructors.
 *
 * Example usage:
 *
 * ok> rec: pt field: x field: y rec;
 *
 * ok> words/ pt:
 * pt
 * new x x! y y!
 *
 * ok> 10 20 pt:new .s
 *
 * 1    pt: 0000000002f7b830 1  pt:1:data:{"y":20,"x":10}
 *
 * ok> ns:pt isa? .
 * true
 *
 * ok> 30 pt:x! .s
 *
 * 1    pt: 0000000002f7b830 1  pt:1:data:{"y":20,"x":30}
 *
 *
 * Additionally, there is support for FFI structures using packed records.
 * Instead of using a user-type/map for the record, an array is used which can
 * be packed and unpacked into a buffer. For this reason, each field requires
 * a string argument identifying the packed type it is.
 *
 * Example usage:
 *
 * ok> packed-rec: pt "i" field: x "i" field: y packed-rec;
 *
 * ok> words/ pt:
 * pt
 * new pack unpack x x! y y!
 *
 * ok> 10 20 pt:new .s
 *
 * 1    a: 0000000000ff5c80 1  [10,20]
 *
 * ok> pt:pack .s
 *
 * 1    b: 0000000000ff3610 1  0000000000000008 0a00000014000000
 *
 * ok> pt:unpack .s
 *
 * 2    n: 0000000000ff9c50 1    8
 * 1    a: 0000000000ff5c80 1  [10,20]
 *)

private

-- w: (boa)
-- s: a --
-- d: Given an array of keys, compile m! for each into the current word.

: (boa) \ a --
    a:rev ( ' swap p: compile p: literal ' m:_! p: compile ) a:each! drop ;

-- w: (new)
-- s: a --
-- d: Defines a `new` word that is a boa constructor for the record.

: (new) \ a --
    "new" (:) ns? s>ns p: literal ' new p: compile #p:(boa) p: ; ;

-- w: (getter)
-- s: s --
-- d: Defines a getter word named s for the current record type.

: (getter) \ s --
    (:) dup p: literal ' m:@ p: compile p: ; ;

-- w: (setter)
-- s: s --
-- d: Defines a setter word named s! for the current record type.

: (setter) \ s --
    dup "!" s:+ (:) p: literal ' m:_! p: compile p: ; ;

-- w: (field)
-- s: a <name> -- a
-- d: Defines a setter and getter word for a mapped record.

: (field) \ a <name> -- a
    parsews dup #p:(getter) dup #p:(setter) a:push ;

-- w: (packed-getter)
-- s: n s --
-- d: Defined a getter word named s for the current index.

: (packed-getter) \ n s --
    (:) p: literal ' a:@ p: compile p: ; ;

-- w: (packed-setter)
-- s: n s --
-- d: Defined a setter word named s! for the current index.

: (packed-setter) \ n s --
    "!" s:+ (:) p: literal ' swap p: compile ' a:! p: compile p: ; ;

-- w: (packed-field)
-- s: n s s -- n s s
-- d: Define a getter and setter for an indexed, packed record. The top of
-- d: the stack is the packed type (e.g. "i"), below that is the current
-- d: packed structure string (which is appended to), and finally n is the
-- d: current index of this field.

: (packed-field) \ n s s -- n s
    s:+ >r dup parsews 2dup #p:(packed-getter) #p:(packed-setter) n:1+ r> ;

-- w: (pack)
-- s: s --
-- d: Defines a `pack` word in the current namespace.

: (pack) \ s --
    "pack" (:) p: literal ' G:pack p: compile p: ; ;

-- w: (unpack)
-- s: s --
-- d: Defines an `unpack` word in the current namespace.

: (unpack) \ s --
    "unpack" (:) p: literal ' G:unpack p: compile p: ; ;

-- w: (close)
-- s: n --
-- d: Defines a `new` word in the current namespace.

: (close) \ n --
    "new" (:) p: literal ' a:close p: compile p: ; ;

public

-- w: field:
-- s: <name> --
-- d: Defines a new field in a rec: or packed-rec: structure. This function
-- d: has no default implementation, and is only valid for use from within
-- d: a rec: or packed-rec:, which defines what the stack arguments are, if
-- d: any. See #p:(field) and #p:(packed-field).

defer: G:field:

-- w: rec:
-- s: <name> -- n a \\\ IMMEDIATE
-- d: Creates a namespace for the record type name, leaving the current
-- d: namespace on the stack along with an empty array that will hold the
-- d: field names for the record.

: G:rec: \ <name> -- n a \\\ IMMEDIATE
    ns? ns: a:new ' #p:(field) w:is G:field: i;

-- w: rec;
-- s: n a -- \\\ IMMEDIATE
-- d: Takes the array of fields on the stack and defines a `new` word that
-- d: is a BOA constructor for the record given arguments on the stack. Then
-- d: restores the namespace back to what it originally was.

: G:rec; \ a -- \\\ IMMEDIATE
    #p:(new) ns ' noop w:is G:field: i;

-- w: packed-rec:
-- s: <name> -- n n s \\\ IMMEDIATE
-- d: Creates a namespace for the packed record type name, leaving the current
-- d: index and packed structure.

: G:packed-rec: \ <name> -- n s \\\ IMMEDIATE
    ns? ns: 0 "" ' #p:(packed-field) w:is G:field: i;

-- w: packed-rec;
-- s: n n s -- \\\ IMMEDIATE
-- d: Takes the packed record string and creates `pack` and `unpack` words for
-- d: the packed record along with a `new` word. Then restores the namespace
-- d: back to what it originally was.

: G:packed-rec; \ n n s -- \\\ IMMEDIATE
    dup #p:(pack) #p:(unpack) #p:(close) ns ' noop w:is G:field: i;
