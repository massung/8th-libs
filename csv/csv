\ -*- 8th -*-

needs ext/pipe

ns: csv

\ column parser
defer: (cols)

\ column mapping
m:new var, columns

-- w: csv:sep
-- s: s --
-- d: Set the current column separator.

: sep \ s --
    dup "(?<=^|%s)(?:\"(.*)\"|[^\"]*?)(?=%s|$)" strfmt

    \ create the column parser
    r:new ' r:+/ curry w:is (cols) ;

\ default to comma-separated values
"," sep

-- w: csv:next-line
-- s: f -- f s
-- d: Reads the next line of a csv, skipping comments.

: next-line \ f -- f s
    repeat f:getline null? if; 0 s:@ '# = while! ;

-- w: csv:next-row
-- s: f -- f a
-- d: Read the next line and parse it into an array.

: next-row \ f -- f a
    next-line null? if; (cols) ;

-- w: csv:(col)
-- s: n -- w
-- d: Create a column lookup by index word.

: (col) \ n -- w
    ' a:@ curry ;

-- w: csv:set-header
-- s: a --
-- d: Provided an array of column names, create a new column map.

: set-header \ a --
    columns @ m:clear swap ( swap (col) m:! ) a:each 2drop ;

-- w: csv:read-header
-- s: f -- f
-- d: Read the next row of the CSV and save it as the current header. If
-- d: there are no more rows then the header isn't read.

: read-header \ f -- f m
    next-row [] ?: set-header ;

-- w: csv:col
-- s: x -- w
-- d: Create a word that will lookup the value of a given column in a row.
-- d: If x is a number it is assumed to be the column index (0-based),
-- d: otherwise it is a column name and looked up in the map.

: col \ x -- w
    dup >n if >n ' a:@ curry ;then columns @ swap ( null ) m:@? nip ;

-- w: csv:cut
-- s: a cols -- a1
-- d: Return an array of new values from an array of column words.

: cut \ a cols -- a1
    ' w:exec a:map nip ;

-- w: csv:.row
-- s: a s --
-- d: Print a row to standard out using the given separator.

: .row \ a s --
    swap a:len n:1- >r ( . r@ n:= if drop ;then dup . ) a:each cr drop rdrop ;

-- w: csv:each
-- s: f w -- f
-- d: Similar to a:each!. Every row in an opened CSV file (see csv:open)
-- d: is read and the word on the stack is called with the row.

: each \ f w -- f
    >r repeat next-row null? if r> 2drop ;then r@ w:exec again rdrop ;

-- w: csv:open
-- s: s -- f
-- d: Open a CSV file as read-only. Clears the current header.

: open \ s -- f
    f:open-ro columns @ m:clear drop ;
